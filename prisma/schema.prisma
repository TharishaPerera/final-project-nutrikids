// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ENUMS
enum PostStatus {
  NEW
  APPROVED
  REJECTED
  EDITED
  DELETED
}

enum CommentStatus {
  ACTIVE
  DEACTIVATED
  EDITED
  DELETED
}

enum AppointmentStatus {
  SCHEDULED
  ONGOING
  COMPLETED
  CANCELED
  RESCHEDULED
}

enum PaymentMethod {
  CASH
  CARD
  CHEQUE
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
}

// MODELS
model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  telephone             String?
  role                  Int                    @default(10001)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  accessLog             AccessLog[]
  child                 Child[]
  isPediatrician        Pediatrician?
  isAssistant           Assistant?
  posts                 Post[]
  savedPosts            SavedPost[]
  comments              Comment[]
  appointment           Appointment[]
  payment               Payment[]
  subscriptionId        String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt

  subscription Subscription? @relation(fields: [subscriptionId], references: [id])
  userRole     UserRole      @relation(fields: [role], references: [id])
  Helpful      Helpful[]
}

model UserRole {
  id        Int      @id @default(autoincrement())
  level     Int
  role      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String @unique

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AccessLog {
  id        Int      @id @default(autoincrement())
  activity  String
  ipAddress Int
  timestamp DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model Child {
  id           String         @id @default(cuid())
  parentId     String
  name         String
  dateOfBirth  DateTime
  gender       String
  healthRecord HealthRecord[]
  appointment  Appointment[]

  user User @relation(fields: [parentId], references: [id], onDelete: Cascade)
}

model HealthRecord {
  id              String   @id @default(cuid())
  childId         String
  documents       String?
  additionalNotes String?
  createdAt       DateTime @default(now())

  child Child @relation(fields: [childId], references: [id], onDelete: Cascade)
}

model Pediatrician {
  pediatricianId   String        @id @default(cuid())
  userId           String        @unique
  qualifications   String?
  speacializations String?
  description      String?
  availability     Availabilty[]
  assistant        Assistant[]
  appointment      Appointment[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Availabilty {
  id             Int    @id @default(autoincrement())
  pediatricianId String
  startTime      String
  endTime        String
  location       String
  dateOfWeek     String

  pediatrician Pediatrician @relation(fields: [pediatricianId], references: [pediatricianId], onDelete: Cascade)
}

model Assistant {
  assistantId    String  @id @default(cuid())
  userId         String  @unique
  pediatricianId String
  qualifications String?

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  pediatrician Pediatrician @relation(fields: [pediatricianId], references: [pediatricianId], onDelete: Cascade)
}

model Post {
  id        String      @id @default(cuid())
  userId    String
  title     String
  media     String?
  content   String?     @db.LongText
  status    PostStatus  @default(NEW)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  savedPost SavedPost[]

  user      User      @relation(fields: [userId], references: [id])
  comment   Comment[]
  isHelpful Helpful[]
}

model SavedPost {
  id     Int    @id @default(autoincrement())
  userId String
  postId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

model Comment {
  id        Int           @id @default(autoincrement())
  userId    String
  postId    String
  parent    Int?
  status    CommentStatus @default(ACTIVE)
  content   String
  validity  Boolean       @default(false)
  createdAt DateTime      @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Helpful {
  id        Int      @id @default(autoincrement())
  userId    String
  postid    String
  isHelpful Boolean
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postid], references: [id], onDelete: Cascade)
}

model Appointment {
  id              String            @id @default(cuid())
  pediatricianId  String
  childId         String
  parentId        String
  appointmentDate DateTime
  timeslot        String
  additionalNotes String?
  status          AppointmentStatus @default(SCHEDULED)
  payment         Payment?

  pediatrician Pediatrician @relation(fields: [pediatricianId], references: [pediatricianId])
  child        Child        @relation(fields: [childId], references: [id])
  parent       User         @relation(fields: [parentId], references: [id])
}

model Payment {
  id                 String        @id @default(cuid())
  appointmentId      String        @unique
  userId             String
  method             PaymentMethod @default(CASH)
  amount             Decimal       @default(0.0)
  transactionDetails String?
  timestamp          DateTime      @default(now())

  appointment Appointment @relation(fields: [appointmentId], references: [id])
  user        User        @relation(fields: [userId], references: [id])
}

model Subscription {
  id        String             @id @default(cuid())
  startDate DateTime
  endDate   DateTime
  status    SubscriptionStatus @default(ACTIVE)
  planId    String             @unique
  user      User[]

  subscriptionPlan SubscriptionPlan @relation(fields: [planId], references: [id])
}

model SubscriptionPlan {
  id          String  @id @default(cuid())
  planName    String
  description String
  price       Decimal @default(0.0)
  features    String
  duration    String

  subscription Subscription?
}
